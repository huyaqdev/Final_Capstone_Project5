# CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.1/language-python/ for more details
#
version: 2.1
jobs:
  build:
    docker:
      # Use the same Docker base as the project
      - image: python:3.7.3-stretch

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint 

  docker-upload:
    docker:
      # Use the Image that have Docker installed
      - image: circleci/golang:1.15

    working_directory: ~/repo
    steps:
      - checkout

      - setup_remote_docker:
          version: 19.03.13

      - run:
          name: Docker build
          command: |
            # Build with tag
            docker build --tag=$DOCKER_IMAGE_NAME .
            # List image
            docker image ls

      # Upload to Docker hub dockertonymd
      - run:
          name: Dockerhub upload
          command: |
            echo "Docker ID and Image: $DOCKER_IMAGE_NAME"
            docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
            docker tag $DOCKER_IMAGE_NAME $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:$CIRCLE_WORKFLOW_ID
            docker push $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:$CIRCLE_WORKFLOW_ID

  deployment-infra:
    docker:
      - image: amazon/aws-cli

    steps:
      - checkout
      - run:
          name: Install lib
          command: yum install -y tar gzip
      - run:
          name: EKS network
          command: |
            aws cloudformation deploy \
              --template-file cloudfn/network_infrastructure.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-network" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudfn/network_parameters.json
      - run:
          name: EKS cluster
          command: |
            aws cloudformation deploy \
              --template-file cloudfn/cluster_infrastructure.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-cluster" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudfn/cluster_parameters.json \
              --capabilities CAPABILITY_NAMED_IAM
          no_output_timeout: 15m
      - run:
          name: Nodegr
          command: |
            aws cloudformation deploy \
              --template-file cloudfn/eks_nodegr_infrastructure.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-nodegr" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudfn/eks_nodegr_parameters.json \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Management
          command: |
            aws cloudformation deploy \
              --template-file cloudfn/direction_infrastructure.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-direction" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudfn/direction_parameters.json \
              --output text >> ~/deployment.txt
            cat ~/deployment.txt
      - run:
          name: Extract management public Ip Address
          command: |
            echo [management] > ~/inventory.txt
            aws ec2 describe-instances \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=${ENVIRONMENT_NAME}-direction*" \
              --output text >> ~/inventory.txt
            cat ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
            - deployment.txt

  configure-infra:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "37:51:2b:db:17:c9:ef:9d:aa:39:1a:42:5c:8a:2c:9f"
      - attach_workspace:
          at: ~/
      - run:
          name: Install lib
          command: |
            apk add --update ansible
      - run:
          name: Server configuration
          command: |
            if grep -q "No changes to deploy" ~/deployment.txt
              then
                cat ~/inventory.txt
                echo "Direction instances configured"
              else
                cat ~/inventory.txt
                cd ansible
                ansible-playbook -i ~/inventory.txt server_cf.yml
              fi
          environment:
            ANSIBLE_HOST_KEY_CHECKING: False

  cluster-configure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "37:51:2b:db:17:c9:ef:9d:aa:39:1a:42:5c:8a:2c:9f"
      - attach_workspace:
          at: ~/
      - run:
          name: Install lib
          command: |
            apk add --update ansible
      - run:
          name: Server configuration
          command: |
            if grep -q "No changes to deploy" ~/deployment.txt
              then
                cat ~/inventory.txt
                echo "Direction instances configured"
              else
                cat ~/inventory.txt
                cd ansible
                ansible-playbook -i ~/inventory.txt cluster_cf.yml
              fi
          environment:
            ANSIBLE_HOST_KEY_CHECKING: False
      - run:
          name: LB domain
          command: |
            if grep -q "No changes to deploy" ~/deployment.txt
              then
                cat ~/inventory.txt
                echo "Direction instances configured."
              else
                cat ~/inventory.txt
                echo "Wait 60 seconds..."
                sleep 60
              fi
          environment:
            ANSIBLE_HOST_KEY_CHECKING: False
      - run:
          name: LB DNS
          command: |
            cat ~/inventory.txt
            cd ansible
            ansible-playbook -i ~/inventory.txt dns_lb_store.yml
            cat ~/elb_dns.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - elb_dns.txt

  docker-deployment:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "37:51:2b:db:17:c9:ef:9d:aa:39:1a:42:5c:8a:2c:9f"
      - attach_workspace:
          at: ~/
      - run:
          name: Install lib
          command: |
            apk add --update ansible
      - run:
          name: Docker image deploy
          command: |
            cat ~/inventory.txt
            cd ansible
            ansible-playbook -i ~/inventory.txt app_dep.yml
          environment:
            ANSIBLE_HOST_KEY_CHECKING: False
          no_output_timeout: 2m

workflows:
  my_workflow:
    jobs:
      - build
      - docker-upload:
          requires:
            - build
          filters:
            branches:
              only: [ main ]
      - deployment-infra:
          filters:
            branches:
              only: [ main ]
      - configure-infra:
          requires:
            - deployment-infra
      - cluster-configure:
          requires:
            - docker-upload
            - configure-infra
      - docker-deployment:
          requires:
            - cluster-configure
      

